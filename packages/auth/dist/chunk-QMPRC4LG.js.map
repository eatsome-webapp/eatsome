{"version":3,"sources":["/Users/emre/Sites/eatsome/packages/auth/dist/chunk-QMPRC4LG.js","../src/middleware.ts"],"names":[],"mappings":"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","file":"/Users/emre/Sites/eatsome/packages/auth/dist/chunk-QMPRC4LG.js","sourcesContent":[null,"import { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\nimport type { Database } from './types';\n\nexport async function updateSession(request: NextRequest) {\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  });\n\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value;\n        },\n        set(name: string, value: string, options: any) {\n          // Set cookie on the response so it will be used for client-side routing\n          response.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n        },\n        remove(name: string, options: any) {\n          // Remove cookie from the response\n          response.cookies.set({\n            name,\n            value: '',\n            ...options,\n            maxAge: 0,\n          });\n        },\n      },\n    }\n  );\n\n  // This will refresh the session if it exists\n  await supabase.auth.getUser();\n\n  return response;\n}\n\nexport function createMiddleware(config?: {\n  publicRoutes?: string[];\n  authRoutes?: string[];\n  defaultRedirectPath?: string;\n  loginRedirectPath?: string;\n}) {\n  const {\n    publicRoutes = ['/auth/error', '/auth/confirm'],\n    authRoutes = ['/auth/login', '/auth/signup', '/auth/reset-password'],\n    defaultRedirectPath = '/dashboard',\n    loginRedirectPath = '/auth/login',\n  } = config || {};\n\n  return async function middleware(request: NextRequest) {\n    const res = await updateSession(request);\n    \n    const path = request.nextUrl.pathname;\n    \n    const isPublicRoute = publicRoutes.some(route => \n      path.startsWith(route) || \n      path.startsWith('/_next') || \n      path.includes('favicon') || \n      path === '/'\n    );\n    \n    const isAuthRoute = authRoutes.some(route => path.startsWith(route));\n    \n    const supabase = createServerClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          get(name) {\n            return request.cookies.get(name)?.value;\n          },\n          set() {}, // No-op since we're just reading\n          remove() {} // No-op since we're just reading\n        }\n      }\n    );\n    \n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user && !isPublicRoute && !isAuthRoute) {\n      const redirectUrl = new URL(loginRedirectPath, request.url);\n      redirectUrl.searchParams.set('redirect', path);\n      return NextResponse.redirect(redirectUrl);\n    }\n    \n    if (user && isAuthRoute) {\n      return NextResponse.redirect(new URL(defaultRedirectPath, request.url));\n    }\n    \n    return res;\n  };\n}\n\n// Example middleware integration:\n// export async function middleware(request: NextRequest) {\n//   return await updateSession(request);\n// }\n// \n// export const config = {\n//   matcher: [\n//     /*\n//      * Match all request paths except for the ones starting with:\n//      * - _next/static (static files)\n//      * - _next/image (image optimization files)\n//      * - favicon.ico (favicon file)\n//      * Feel free to modify this pattern to include more paths.\n//      */\n//     '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n//   ],\n// }; "]}