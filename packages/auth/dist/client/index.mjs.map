{"version":3,"sources":["../../src/client/index.ts"],"sourcesContent":["'use client';\n\nimport { createBrowserClient } from '@supabase/ssr';\nimport React, { useState, useEffect } from 'react';\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  return children;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<any>(null);\n  const [session, setSession] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  \n  const supabase = createClient();\n  \n  useEffect(() => {\n    const getSession = async () => {\n      setIsLoading(true);\n      const { data: { session: sessionData } } = await supabase.auth.getSession();\n      \n      if (sessionData) {\n        const { data: { user: userData } } = await supabase.auth.getUser();\n        setUser(userData);\n        setSession(sessionData);\n      }\n      \n      setIsLoading(false);\n    };\n    \n    getSession();\n    \n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (_event, newSession) => {\n        setSession(newSession);\n        setUser(newSession?.user || null);\n      }\n    );\n    \n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [supabase]);\n  \n  const signIn = async ({ email, password }: { email: string; password: string }) => {\n    return await supabase.auth.signInWithPassword({ \n      email,\n      password\n    });\n  };\n  \n  const signUp = async ({ email, password }: { email: string; password: string }) => {\n    return await supabase.auth.signUp({\n      email,\n      password\n    });\n  };\n  \n  const signOut = async () => {\n    return await supabase.auth.signOut();\n  };\n  \n  const getSession = async () => {\n    const { data: { session: sessionData } } = await supabase.auth.getSession();\n    return sessionData;\n  };\n  \n  return {\n    user,\n    session,\n    supabase,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n    getSession\n  };\n}\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n}"],"mappings":";;;AAEA,SAAS,2BAA2B;AACpC,SAAgB,UAAU,iBAAiB;AAEpC,SAAS,aAAa,EAAE,SAAS,GAAkC;AACxE,SAAO;AACT;AAEO,SAAS,UAAU;AACxB,QAAM,CAAC,MAAM,OAAO,IAAI,SAAc,IAAI;AAC1C,QAAM,CAAC,SAAS,UAAU,IAAI,SAAc,IAAI;AAChD,QAAM,CAAC,WAAW,YAAY,IAAI,SAAkB,IAAI;AAExD,QAAM,WAAW,aAAa;AAE9B,YAAU,MAAM;AACd,UAAMA,cAAa,YAAY;AAC7B,mBAAa,IAAI;AACjB,YAAM,EAAE,MAAM,EAAE,SAAS,YAAY,EAAE,IAAI,MAAM,SAAS,KAAK,WAAW;AAE1E,UAAI,aAAa;AACf,cAAM,EAAE,MAAM,EAAE,MAAM,SAAS,EAAE,IAAI,MAAM,SAAS,KAAK,QAAQ;AACjE,gBAAQ,QAAQ;AAChB,mBAAW,WAAW;AAAA,MACxB;AAEA,mBAAa,KAAK;AAAA,IACpB;AAEA,IAAAA,YAAW;AAEX,UAAM,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,SAAS,KAAK;AAAA,MAC/C,CAAC,QAAQ,eAAe;AACtB,mBAAW,UAAU;AACrB,gBAAQ,YAAY,QAAQ,IAAI;AAAA,MAClC;AAAA,IACF;AAEA,WAAO,MAAM;AACX,mBAAa,YAAY;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,QAAQ,CAAC;AAEb,QAAM,SAAS,OAAO,EAAE,OAAO,SAAS,MAA2C;AACjF,WAAO,MAAM,SAAS,KAAK,mBAAmB;AAAA,MAC5C;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,SAAS,OAAO,EAAE,OAAO,SAAS,MAA2C;AACjF,WAAO,MAAM,SAAS,KAAK,OAAO;AAAA,MAChC;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,UAAU,YAAY;AAC1B,WAAO,MAAM,SAAS,KAAK,QAAQ;AAAA,EACrC;AAEA,QAAM,aAAa,YAAY;AAC7B,UAAM,EAAE,MAAM,EAAE,SAAS,YAAY,EAAE,IAAI,MAAM,SAAS,KAAK,WAAW;AAC1E,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,eAAe;AAC7B,SAAO;AAAA,IACL,QAAQ,IAAI;AAAA,IACZ,QAAQ,IAAI;AAAA,EACd;AACF;","names":["getSession"]}