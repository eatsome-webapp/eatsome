{"version":3,"sources":["/Users/emre/Sites/eatsome/packages/auth/dist/client/index.js","../../src/client/index.ts"],"names":["getSession"],"mappings":"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","file":"/Users/emre/Sites/eatsome/packages/auth/dist/client/index.js","sourcesContent":[null,"'use client';\n\nimport { createBrowserClient } from '@supabase/ssr';\nimport React, { useState, useEffect } from 'react';\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  return children;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<any>(null);\n  const [session, setSession] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  \n  const supabase = createClient();\n  \n  useEffect(() => {\n    const getSession = async () => {\n      setIsLoading(true);\n      const { data: { session: sessionData } } = await supabase.auth.getSession();\n      \n      if (sessionData) {\n        const { data: { user: userData } } = await supabase.auth.getUser();\n        setUser(userData);\n        setSession(sessionData);\n      }\n      \n      setIsLoading(false);\n    };\n    \n    getSession();\n    \n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (_event, newSession) => {\n        setSession(newSession);\n        setUser(newSession?.user || null);\n      }\n    );\n    \n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [supabase]);\n  \n  const signIn = async ({ email, password }: { email: string; password: string }) => {\n    return await supabase.auth.signInWithPassword({ \n      email,\n      password\n    });\n  };\n  \n  const signUp = async ({ email, password }: { email: string; password: string }) => {\n    return await supabase.auth.signUp({\n      email,\n      password\n    });\n  };\n  \n  const signOut = async () => {\n    return await supabase.auth.signOut();\n  };\n  \n  const getSession = async () => {\n    const { data: { session: sessionData } } = await supabase.auth.getSession();\n    return sessionData;\n  };\n  \n  return {\n    user,\n    session,\n    supabase,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n    getSession\n  };\n}\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  );\n}"]}