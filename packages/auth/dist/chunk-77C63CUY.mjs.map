{"version":3,"sources":["../src/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\nimport type { Database } from './types';\n\nexport async function updateSession(request: NextRequest) {\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  });\n\n  const supabase = createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value;\n        },\n        set(name: string, value: string, options: any) {\n          // Set cookie on the response so it will be used for client-side routing\n          response.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n        },\n        remove(name: string, options: any) {\n          // Remove cookie from the response\n          response.cookies.set({\n            name,\n            value: '',\n            ...options,\n            maxAge: 0,\n          });\n        },\n      },\n    }\n  );\n\n  // This will refresh the session if it exists\n  await supabase.auth.getUser();\n\n  return response;\n}\n\nexport function createMiddleware(config?: {\n  publicRoutes?: string[];\n  authRoutes?: string[];\n  defaultRedirectPath?: string;\n  loginRedirectPath?: string;\n}) {\n  const {\n    publicRoutes = ['/auth/error', '/auth/confirm'],\n    authRoutes = ['/auth/login', '/auth/signup', '/auth/reset-password'],\n    defaultRedirectPath = '/dashboard',\n    loginRedirectPath = '/auth/login',\n  } = config || {};\n\n  return async function middleware(request: NextRequest) {\n    const res = await updateSession(request);\n    \n    const path = request.nextUrl.pathname;\n    \n    const isPublicRoute = publicRoutes.some(route => \n      path.startsWith(route) || \n      path.startsWith('/_next') || \n      path.includes('favicon') || \n      path === '/'\n    );\n    \n    const isAuthRoute = authRoutes.some(route => path.startsWith(route));\n    \n    const supabase = createServerClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          get(name) {\n            return request.cookies.get(name)?.value;\n          },\n          set() {}, // No-op since we're just reading\n          remove() {} // No-op since we're just reading\n        }\n      }\n    );\n    \n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user && !isPublicRoute && !isAuthRoute) {\n      const redirectUrl = new URL(loginRedirectPath, request.url);\n      redirectUrl.searchParams.set('redirect', path);\n      return NextResponse.redirect(redirectUrl);\n    }\n    \n    if (user && isAuthRoute) {\n      return NextResponse.redirect(new URL(defaultRedirectPath, request.url));\n    }\n    \n    return res;\n  };\n}\n\n// Example middleware integration:\n// export async function middleware(request: NextRequest) {\n//   return await updateSession(request);\n// }\n// \n// export const config = {\n//   matcher: [\n//     /*\n//      * Match all request paths except for the ones starting with:\n//      * - _next/static (static files)\n//      * - _next/image (image optimization files)\n//      * - favicon.ico (favicon file)\n//      * Feel free to modify this pattern to include more paths.\n//      */\n//     '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n//   ],\n// }; "],"mappings":";AAAA,SAAS,0BAA0B;AACnC,SAAS,oBAAsC;AAG/C,eAAsB,cAAc,SAAsB;AACxD,MAAI,WAAW,aAAa,KAAK;AAAA,IAC/B,SAAS;AAAA,MACP,SAAS,QAAQ;AAAA,IACnB;AAAA,EACF,CAAC;AAED,QAAM,WAAW;AAAA,IACf,QAAQ,IAAI;AAAA,IACZ,QAAQ,IAAI;AAAA,IACZ;AAAA,MACE,SAAS;AAAA,QACP,IAAI,MAAc;AAChB,iBAAO,QAAQ,QAAQ,IAAI,IAAI,GAAG;AAAA,QACpC;AAAA,QACA,IAAI,MAAc,OAAe,SAAc;AAE7C,mBAAS,QAAQ,IAAI;AAAA,YACnB;AAAA,YACA;AAAA,YACA,GAAG;AAAA,UACL,CAAC;AAAA,QACH;AAAA,QACA,OAAO,MAAc,SAAc;AAEjC,mBAAS,QAAQ,IAAI;AAAA,YACnB;AAAA,YACA,OAAO;AAAA,YACP,GAAG;AAAA,YACH,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,QAAM,SAAS,KAAK,QAAQ;AAE5B,SAAO;AACT;AAEO,SAAS,iBAAiB,QAK9B;AACD,QAAM;AAAA,IACJ,eAAe,CAAC,eAAe,eAAe;AAAA,IAC9C,aAAa,CAAC,eAAe,gBAAgB,sBAAsB;AAAA,IACnE,sBAAsB;AAAA,IACtB,oBAAoB;AAAA,EACtB,IAAI,UAAU,CAAC;AAEf,SAAO,eAAe,WAAW,SAAsB;AACrD,UAAM,MAAM,MAAM,cAAc,OAAO;AAEvC,UAAM,OAAO,QAAQ,QAAQ;AAE7B,UAAM,gBAAgB,aAAa;AAAA,MAAK,WACtC,KAAK,WAAW,KAAK,KACrB,KAAK,WAAW,QAAQ,KACxB,KAAK,SAAS,SAAS,KACvB,SAAS;AAAA,IACX;AAEA,UAAM,cAAc,WAAW,KAAK,WAAS,KAAK,WAAW,KAAK,CAAC;AAEnE,UAAM,WAAW;AAAA,MACf,QAAQ,IAAI;AAAA,MACZ,QAAQ,IAAI;AAAA,MACZ;AAAA,QACE,SAAS;AAAA,UACP,IAAI,MAAM;AACR,mBAAO,QAAQ,QAAQ,IAAI,IAAI,GAAG;AAAA,UACpC;AAAA,UACA,MAAM;AAAA,UAAC;AAAA;AAAA,UACP,SAAS;AAAA,UAAC;AAAA;AAAA,QACZ;AAAA,MACF;AAAA,IACF;AAEA,UAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,MAAM,SAAS,KAAK,QAAQ;AAEvD,QAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,aAAa;AAC3C,YAAM,cAAc,IAAI,IAAI,mBAAmB,QAAQ,GAAG;AAC1D,kBAAY,aAAa,IAAI,YAAY,IAAI;AAC7C,aAAO,aAAa,SAAS,WAAW;AAAA,IAC1C;AAEA,QAAI,QAAQ,aAAa;AACvB,aAAO,aAAa,SAAS,IAAI,IAAI,qBAAqB,QAAQ,GAAG,CAAC;AAAA,IACxE;AAEA,WAAO;AAAA,EACT;AACF;","names":[]}