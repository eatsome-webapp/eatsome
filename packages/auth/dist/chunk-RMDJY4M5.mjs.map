{"version":3,"sources":["../src/server/index.ts"],"sourcesContent":["// @ts-nocheck\nimport { createServerClient, CookieOptions } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport type { Database } from '../types';\n\ninterface CookieOptions {\n  name: string;\n  value: string;\n  options?: {\n    httpOnly?: boolean;\n    secure?: boolean;\n    path?: string;\n    maxAge?: number;\n    domain?: string;\n    sameSite?: 'strict' | 'lax' | 'none';\n  };\n}\n\n// Create server-side client \nexport async function createServerComponentClient() {\n  const cookieStore = await cookies();\n  \n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        async get(name: string) {\n          const cookie = await cookieStore.get(name);\n          return cookie?.value;\n        },\n        async set(name: string, value: string, options: any) {\n          try {\n            await cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // Handle cookie setting error if needed\n          }\n        },\n        async remove(name: string, options: any) {\n          try {\n            await cookieStore.set({ name, value: '', ...options, maxAge: 0 });\n          } catch (error) {\n            // Handle cookie removal error if needed\n          }\n        },\n      },\n    }\n  );\n}\n\n// Get the logged-in user from server component\nexport async function getUser() {\n  try {\n    const supabase = await createServerComponentClient();\n    const { data, error } = await supabase.auth.getUser();\n    \n    if (error || !data?.user) {\n      return { \n        user: null,\n        error: error || new Error(\"User not found\") \n      };\n    }\n    \n    return { user: data.user };\n  } catch (error) {\n    console.error(\"Error in getUser:\", error);\n    return { user: null, error };\n  }\n}\n\n// Get user's session from server component\nexport async function getSession() {\n  try {\n    const supabase = await createServerComponentClient();\n    const { data, error } = await supabase.auth.getSession();\n    \n    if (error || !data?.session) {\n      return { \n        session: null,\n        error: error || new Error(\"Session not found\") \n      };\n    }\n    \n    return { session: data.session };\n  } catch (error) {\n    console.error(\"Error in getSession:\", error);\n    return { session: null, error };\n  }\n}\n\n// Check if the current user has access to a restaurant\nexport async function hasRestaurantAccess(restaurantId: string) {\n  if (!restaurantId) return false;\n  \n  const { user } = await getUser();\n  if (!user) return false;\n  \n  const supabase = await createServerComponentClient();\n  \n  // Gebruik de nieuwe functie via RPC om RLS recursie te voorkomen\n  const { data, error } = await supabase.rpc('check_restaurant_membership', {\n    p_user_id: user.id,\n    p_restaurant_id: restaurantId\n  });\n  \n  if (error) {\n    console.error('Error checking restaurant access:', error);\n    return false;\n  }\n  \n  return !!data;\n}\n\n// Get restaurants associated with a user (for restaurant app)\nexport const getUserRestaurants = async () => {\n  const supabase = await createServerComponentClient();\n  \n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      return { restaurants: [] };\n    }\n    \n    // Gebruik de SECURITY DEFINER functie om de oneindige recursie in RLS te vermijden\n    const { data, error } = await supabase.rpc('get_user_restaurants_data', {\n      p_user_id: user.id\n    });\n    \n    if (error) {\n      throw error;\n    }\n    \n    // For testing purposes, return a mock restaurant if no data or empty array\n    if (!data || data.length === 0) {\n      return {\n        restaurants: [\n          {\n            id: 'mock-id',\n            name: 'Test Restaurant',\n            address: 'Teststraat 123, Amsterdam',\n            owner_id: user.id,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            status: 'active',\n            cuisine: 'italian',\n          }\n        ]\n      };\n    }\n    \n    return { restaurants: data };\n  } catch (error) {\n    console.error('Error fetching user restaurants:', error);\n    return { restaurants: [] };\n  }\n};\n\ninterface RestaurantStaff {\n  restaurant_id: string;\n  role: string;\n  restaurants: {\n    id: string;\n    name: string;\n    description: string | null;\n    address: string;\n  };\n}\n\nexport async function getUserRestaurantsById(userId: string): Promise<RestaurantStaff[]> {\n  const supabase = await createServerComponentClient();\n  \n  try {\n    // Gebruik de SECURITY DEFINER functie om oneindige recursie in RLS te vermijden\n    const { data, error } = await supabase.rpc('get_user_restaurants_by_id', {\n      p_user_id: userId\n    });\n    \n    if (error) {\n      console.error('Error getting user restaurants:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getUserRestaurants:', error);\n    return [];\n  }\n} "],"mappings":"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","names":[]}