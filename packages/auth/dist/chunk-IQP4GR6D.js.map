{"version":3,"sources":["/Users/emre/Sites/eatsome/packages/auth/dist/chunk-IQP4GR6D.js","../src/server/index.ts"],"names":[],"mappings":"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","file":"/Users/emre/Sites/eatsome/packages/auth/dist/chunk-IQP4GR6D.js","sourcesContent":[null,"// @ts-nocheck\nimport { createServerClient, CookieOptions } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport type { Database } from '../types';\n\ninterface CookieOptions {\n  name: string;\n  value: string;\n  options?: {\n    httpOnly?: boolean;\n    secure?: boolean;\n    path?: string;\n    maxAge?: number;\n    domain?: string;\n    sameSite?: 'strict' | 'lax' | 'none';\n  };\n}\n\n// Create server-side client \nexport async function createServerComponentClient() {\n  const cookieStore = await cookies();\n  \n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        async get(name: string) {\n          const cookie = await cookieStore.get(name);\n          return cookie?.value;\n        },\n        async set(name: string, value: string, options: any) {\n          try {\n            await cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // Handle cookie setting error if needed\n          }\n        },\n        async remove(name: string, options: any) {\n          try {\n            await cookieStore.set({ name, value: '', ...options, maxAge: 0 });\n          } catch (error) {\n            // Handle cookie removal error if needed\n          }\n        },\n      },\n    }\n  );\n}\n\n// Get the logged-in user from server component\nexport async function getUser() {\n  try {\n    const supabase = await createServerComponentClient();\n    const { data, error } = await supabase.auth.getUser();\n    \n    if (error || !data?.user) {\n      return { \n        user: null,\n        error: error || new Error(\"User not found\") \n      };\n    }\n    \n    return { user: data.user };\n  } catch (error) {\n    console.error(\"Error in getUser:\", error);\n    return { user: null, error };\n  }\n}\n\n// Get user's session from server component\nexport async function getSession() {\n  try {\n    const supabase = await createServerComponentClient();\n    const { data, error } = await supabase.auth.getSession();\n    \n    if (error || !data?.session) {\n      return { \n        session: null,\n        error: error || new Error(\"Session not found\") \n      };\n    }\n    \n    return { session: data.session };\n  } catch (error) {\n    console.error(\"Error in getSession:\", error);\n    return { session: null, error };\n  }\n}\n\n// Check if the current user has access to a restaurant\nexport async function hasRestaurantAccess(restaurantId: string) {\n  if (!restaurantId) return false;\n  \n  const { user } = await getUser();\n  if (!user) return false;\n  \n  const supabase = await createServerComponentClient();\n  \n  // Gebruik de nieuwe functie via RPC om RLS recursie te voorkomen\n  const { data, error } = await supabase.rpc('check_restaurant_membership', {\n    p_user_id: user.id,\n    p_restaurant_id: restaurantId\n  });\n  \n  if (error) {\n    console.error('Error checking restaurant access:', error);\n    return false;\n  }\n  \n  return !!data;\n}\n\n// Get restaurants associated with a user (for restaurant app)\nexport const getUserRestaurants = async () => {\n  const supabase = await createServerComponentClient();\n  \n  try {\n    const { data: { user } } = await supabase.auth.getUser();\n    \n    if (!user) {\n      return { restaurants: [] };\n    }\n    \n    // Gebruik de SECURITY DEFINER functie om de oneindige recursie in RLS te vermijden\n    const { data, error } = await supabase.rpc('get_user_restaurants_data', {\n      p_user_id: user.id\n    });\n    \n    if (error) {\n      throw error;\n    }\n    \n    // For testing purposes, return a mock restaurant if no data or empty array\n    if (!data || data.length === 0) {\n      return {\n        restaurants: [\n          {\n            id: 'mock-id',\n            name: 'Test Restaurant',\n            address: 'Teststraat 123, Amsterdam',\n            owner_id: user.id,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            status: 'active',\n            cuisine: 'italian',\n          }\n        ]\n      };\n    }\n    \n    return { restaurants: data };\n  } catch (error) {\n    console.error('Error fetching user restaurants:', error);\n    return { restaurants: [] };\n  }\n};\n\ninterface RestaurantStaff {\n  restaurant_id: string;\n  role: string;\n  restaurants: {\n    id: string;\n    name: string;\n    description: string | null;\n    address: string;\n  };\n}\n\nexport async function getUserRestaurantsById(userId: string): Promise<RestaurantStaff[]> {\n  const supabase = await createServerComponentClient();\n  \n  try {\n    // Gebruik de SECURITY DEFINER functie om oneindige recursie in RLS te vermijden\n    const { data, error } = await supabase.rpc('get_user_restaurants_by_id', {\n      p_user_id: userId\n    });\n    \n    if (error) {\n      console.error('Error getting user restaurants:', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (error) {\n    console.error('Error in getUserRestaurants:', error);\n    return [];\n  }\n} "]}